// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieApp.Infra.Data.Persistence;

#nullable disable

namespace MovieApp.ProfileApi.Infra.Migrations
{
    [DbContext(typeof(MovieAppDbContext))]
    partial class MovieAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieApp.ProfileApi.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tb_genre", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("388f4472-3227-4180-8ce4-27b3f6b1d5b1"),
                            Name = "Ação"
                        },
                        new
                        {
                            Id = new Guid("6c201b8b-4282-4965-b347-778c59de74b1"),
                            Name = "Aventura"
                        },
                        new
                        {
                            Id = new Guid("947b7dce-4f1c-4f7b-a758-ebcc86e97e43"),
                            Name = "Cinema de arte"
                        },
                        new
                        {
                            Id = new Guid("4cd3b891-2900-47d0-ba72-1420c36b3653"),
                            Name = "Chanchada"
                        },
                        new
                        {
                            Id = new Guid("a7cc8eae-e731-446c-9b85-ebc9db70107f"),
                            Name = "Comédia"
                        },
                        new
                        {
                            Id = new Guid("a1d847b1-4668-4a8d-942e-f4c7c35702eb"),
                            Name = "Comédia de ação"
                        },
                        new
                        {
                            Id = new Guid("79b6aa69-ac86-4c00-a12b-54969eba8503"),
                            Name = "Comédia de terror"
                        },
                        new
                        {
                            Id = new Guid("8023b5ed-3944-40b3-a0a3-4511f01f4b5d"),
                            Name = "Comédia dramática"
                        },
                        new
                        {
                            Id = new Guid("66e2d70e-d4b6-4dbb-a5c8-6ef14151712c"),
                            Name = "Comédia romântica"
                        },
                        new
                        {
                            Id = new Guid("82892d07-cb22-48d9-83b0-dd6bb2ed7be9"),
                            Name = "Dança"
                        },
                        new
                        {
                            Id = new Guid("01582970-47ae-4e12-9d21-cd1278ae962a"),
                            Name = "Documentário"
                        },
                        new
                        {
                            Id = new Guid("a48f64d7-d5b6-45a1-b8c7-d4d034895712"),
                            Name = "Docuficção"
                        },
                        new
                        {
                            Id = new Guid("80e25cf4-59f0-4859-93e4-d1f5d1a58452"),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("ccd1d48a-5665-4cff-b866-02d8d9b043e1"),
                            Name = "Espionagem"
                        },
                        new
                        {
                            Id = new Guid("a54ef8cf-793a-42b3-bce3-39d2112a1348"),
                            Name = "Faroeste"
                        },
                        new
                        {
                            Id = new Guid("64035083-6df0-44b3-9ced-a1542aaf5cf5"),
                            Name = "Fantasia"
                        },
                        new
                        {
                            Id = new Guid("f66920c2-3d2e-4fa1-a6e5-2d1d9fd80fd4"),
                            Name = "Fantasia científica"
                        },
                        new
                        {
                            Id = new Guid("fcec430e-0c46-4acf-a87e-1aed1855a3b5"),
                            Name = "Ficção científica"
                        },
                        new
                        {
                            Id = new Guid("2f5c0210-71f1-43e4-bbd6-725b48ac0f29"),
                            Name = "Filmes com truques"
                        },
                        new
                        {
                            Id = new Guid("2b9473d6-4ca6-431f-b219-e592f5d7a563"),
                            Name = "Guerra"
                        },
                        new
                        {
                            Id = new Guid("51c7d9ff-8303-48c5-bdb7-c07340abe56d"),
                            Name = "Mistério"
                        },
                        new
                        {
                            Id = new Guid("45d63e6f-c403-405d-ae6e-73a01d606fc9"),
                            Name = "Musical"
                        },
                        new
                        {
                            Id = new Guid("d8d73828-09ff-4254-9f48-400c07dfd4d2"),
                            Name = "Policial"
                        },
                        new
                        {
                            Id = new Guid("dcac09a1-1fbd-4f67-ad95-d8fa998fac8e"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("a48c915d-4cf0-4972-8ec8-01c233c3eb16"),
                            Name = "Terror"
                        },
                        new
                        {
                            Id = new Guid("d70fc206-397d-4a7e-8770-1fea0af76f69"),
                            Name = "Thriller"
                        });
                });

            modelBuilder.Entity("MovieApp.ProfileApi.Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dt_created");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("imageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PathM3U8File")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("pathM3U8File");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dt_release");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("synopsis");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dt_update");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("views");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ReleaseDate")
                        .IsUnique();

                    b.ToTable("tb_movie", (string)null);
                });

            modelBuilder.Entity("MovieApp.ProfileApi.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dt_created");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dt_update");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("tb_profile", (string)null);
                });

            modelBuilder.Entity("MovieApp.ProfileApi.Domain.Entities.Rating", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dt_created");

                    b.Property<int>("Score")
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dt_update");

                    b.HasKey("ProfileId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("tb_rating", (string)null);
                });

            modelBuilder.Entity("tb_favorites_movies", b =>
                {
                    b.Property<Guid>("FavoritesMoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FavoritesProfilesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FavoritesMoviesId", "FavoritesProfilesId");

                    b.HasIndex("FavoritesProfilesId");

                    b.ToTable("tb_favorites_movies");
                });

            modelBuilder.Entity("tb_genre_movie", b =>
                {
                    b.Property<Guid>("GenriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenriesId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("tb_genre_movie");
                });

            modelBuilder.Entity("MovieApp.ProfileApi.Domain.Entities.Rating", b =>
                {
                    b.HasOne("MovieApp.ProfileApi.Domain.Entities.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieApp.ProfileApi.Domain.Entities.Profile", "Profile")
                        .WithMany("Ratings")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("tb_favorites_movies", b =>
                {
                    b.HasOne("MovieApp.ProfileApi.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("FavoritesMoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieApp.ProfileApi.Domain.Entities.Profile", null)
                        .WithMany()
                        .HasForeignKey("FavoritesProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("tb_genre_movie", b =>
                {
                    b.HasOne("MovieApp.ProfileApi.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieApp.ProfileApi.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieApp.ProfileApi.Domain.Entities.Movie", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("MovieApp.ProfileApi.Domain.Entities.Profile", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
